# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: yarn install --frozen-lockfile
    - run: yarn test
    
    - name: Publish Docker
      # You may pin to the exact commit or the version.
      # uses: elgohr/Publish-Docker-Github-Action@f7aca2fea76a5218f3c76cd5933c3ba1d8008774
      uses: elgohr/Publish-Docker-Github-Action@3.02
      with:
        # The name of the image you would like to push
        name: node-unit-tests
        # The login username for the registry
        username: engagementteamci
        # The login password for the registry
        password: ${{ secrets.DOCKERHUBPASSWORD }}
        # Use registry for pushing to a custom registry
#         registry: # optional
        # Use snapshot to push an additional image
#         snapshot: # optional
        # Set the default branch of your repository (default: master)
        default_branch: main
        # Use dockerfile when you would like to explicitly build a Dockerfile
#         dockerfile: # optional
        # Use workdir when you would like to change the directory for building
#         workdir: # optional
        # Use context when you would like to change the Docker build context.
#         context: # optional
        # Use buildargs when you want to pass a list of environment variables as build-args
#         buildargs: # optional
        # Use buildoptions when you want to configure options for building
#         buildoptions: # optional
        # Use cache when you have big images, that you would only like to build partially
#         cache: # optional
        # Use tags when you want to bring your own tags (separated by comma)
#         tags: node-unit-tests:github-actions
        # Use tag_names when you want to push tags/release by their git name
        tag_names: github-actions
        # Push semver docker tags. e.g. image:1.2.3, image:1.2, image:1
#         tag_semver: 
        # Set no_push to true if you want to prevent the action from pushing to a registry (default: false)
#         no_push: # optional
    
#     - name: Deploy to Heroku
#       # You may pin to the exact commit or the version.
#       # uses: AkhileshNS/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820
#       uses: AkhileshNS/heroku-deploy@v3.12.12
#       with:
#         # This will be used for authentication. You can find it in your heroku homepage account settings
#         heroku_api_key: ${{ secrets.HEROKUAPIKEY }}
#         # Email that you use with heroku
#         heroku_email: engagement.team@protonmail.com
#         # The appname to use for deploying/updating
#         heroku_app_name: node-unit-tests
#         # An optional buildpack to use when creating the heroku application
# #         buildpack: # optional
#         # The branch that you would like to deploy to Heroku
#         branch: main
        # Set this to true if you don't want to use --force when switching branches
#         dontuseforce: # optional, default is false
        # Set this to true if you don't want to automatically create the Heroku app
#         dontautocreate: # optional, default is false
        # Will deploy using Dockerfile in project root.
#         usedocker: # optional, default is false
        # Type of heroku process (web, worker, etc). This option only makes sense when usedocker enabled
#         docker_heroku_process_type: # optional, default is web
        # A list of args to pass into the Docker build. This option only makes sense when usedocker enabled
#         docker_build_args: # optional
        # Set if your app is located in a subdirectory.
#         appdir: # optional, default is 
        # A URL to which a healthcheck is performed (checks for 200 request)
#         healthcheck: # optional, default is 
        # Value to check for when conducting healthcheck request
#         checkstring: # optional, default is 
        # Time (in seconds) to wait before performing healthcheck
#         delay: # optional, default is 0
        # Contents of the Procfile to save and deploy
#         procfile: # optional, default is 
#         When set to true this will attempt to rollback to the previous release if the healthcheck fails
#         rollbackonhealthcheckfailed: # optional, default is false
        # Path to an localized env file
#         env_file: # optional, default is 
        # Set to true if you want the action to just login to Heroku and nothing else
#         justlogin: # optional, default is false
        # The region in which you would like to deploy a server
#         region: # optional, default is 
        # Set stack of your heroku app if you need to change.Default : heroku-20
#         stack: # optional, default is 
        # If deploying to an organization, then specify the name of the team or organization here
#         team: # optional, default is 
  
